% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NSE-filter-samples.R
\name{filter_samples.FacileDataSet}
\alias{filter_samples.FacileDataSet}
\title{Filter against the sample_covariate_tbl EAV table as if it were wide.}
\usage{
\method{filter_samples}{FacileDataSet}(
  x,
  ...,
  samples. = samples(x),
  custom_key = Sys.getenv("USER"),
  with_covariates = FALSE
)
}
\arguments{
\item{x}{A \code{FacileDataSet}}

\item{...}{NSE claused to use in \code{\link[dplyr:filter]{dplyr::filter()}} expressions}
}
\value{
a sample-descriptor \code{data.frame} that includes the dataset,sample_id
pairs that match the virtual \code{filter(covaries, ...)} clause executed here.
}
\description{
This allows the user to query the \code{FacileDataSet} as if it were a wide
\code{pData} \code{data.frame} of all its covariates.
}
\details{
This feature is only really meant to be
used interactively, and with extreme caution ... programatically specifying
the covariates, for instance, does not work right now.

TODO: Implement using \code{tidyeval}
}
\examples{
fds <- exampleFacileDataSet()

# To identify all samples that are of "CMS3" or "CMS4" subtype(
# stored in the "subtype_crc_cms" covariate:
crc.34 <- filter_samples(fds, subtype_crc_cms \%in\% c("CMS3", "CMS4"))
eav.query <- fds |>
  fetch_sample_covariates(covariates = "subtype_crc_cms") |>
  filter(value \%in\% c("CMS3", "CMS4")) |>
  collect()
setequal(crc.34$sample_id, eav.query$sample_id)

# You can keep filtering a filtered dataset
crc.34.male <- filter_samples(crc.34, sex == "m")
}
\seealso{
Other API: 
\code{\link{fetch_assay_score.FacileDataSet}()},
\code{\link{fetch_custom_sample_covariates.FacileDataSet}()},
\code{\link{fetch_sample_covariates}()},
\code{\link{fetch_sample_statistics.FacileDataSet}()},
\code{\link{fetch_samples.FacileDataSet}()},
\code{\link{filter_features.FacileDataSet}()},
\code{\link{organism.FacileDataSet}()},
\code{\link{samples.FacileDataSet}()}
}
\concept{API}
