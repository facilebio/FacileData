% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/remove_batch_effect.R
\name{remove_batch_effect}
\alias{remove_batch_effect}
\title{Regress out confounding variables from a data matrix.}
\usage{
remove_batch_effect(
  x,
  sample_info,
  batch = NULL,
  main = NULL,
  maintain.rowmeans = FALSE,
  ...
)
}
\arguments{
\item{x}{A matrix of values that needs to be corrected}

\item{sample_info}{a data.frame of covariate information for the data in \code{x}.
The rows of \code{sample_info} are assumed to match the columns of \code{x}. This
data.frame should have the covariates named in \code{batch} and \code{main} to use
for the correction. If \code{sample_info} is a \code{facile_frame}, we will endeavor
to pull any covariate named in \code{batch} and \code{main} that do not already
appear in the columns of \code{sample_info}. Unlike limma's removeBatchEffect,
we do not try to fish out the covariate values from anywhere in the
"ether". They \emph{must} be found in this data.frame.}

\item{batch}{The column names in \code{sample_info} that specify the batch
covariates in the data that will be regressed out.}

\item{main}{The name of a covaraite in \code{sample_info} that contains a known
covariate that describes the "effect" of an experiment that should not
be regressed out. Please refer to the Details section for more informaiton.}
}
\value{
a corrected version of the data matrix \code{x}.
}
\description{
Data \code{x} is assumed to be log-like, and this function provides a simplified
interface to \code{\link[limma:removeBatchEffect]{limma::removeBatchEffect()}}.  The \code{batch} parameter replaces
\code{batch}, \code{batch2}, and \code{covariates}. The \code{design} parameter is replaced with
\code{main}. This function is mostly for use within the
\code{fetch_assay_data(..., normalized = TRUE, batch = 'something')} pipeline,
but refactored out here for general re-use.
}
\details{
The \code{batch} and \code{main} parameters must be characters that will either
reference already existing columns in the \code{sample_info}, or be covariates
that can be retrieved from a FacileDataStore that is attached to the
sample_info facile_frame.

We'll use these parameters to build a model.matrix with main and batch
effect and follow the use of \code{removeBatchEffect} as outlined in the post
linked to below to pull the design matrix apart and call the function with
the corresponding \code{design} and \code{covariates} parameters:

https://support.bioconductor.org/p/83286/#83287

Setting the \code{batch.scale} parameter to \code{TRUE} (the default), ensures that
the \code{rowMeans} of the returned data matrix are the same as the original
dataset.
}
\section{Missing values in batch covariates}{

It can be that some of the levels of the \code{batch} and \code{main} covariates
are missing \code{NA}. When these covariates are categorical, all missing values
will be replaced with a dummy value using the logic from \code{\link[=freplace_na]{freplace_na()}}

If numeric covariates are missing, then this will throw an error.
}

\examples{
# We'll materialize a data matrix and sample_info table from the
# exampleFacileDataSet, then correct the data matrix.
efds <- exampleFacileDataSet()
sample.info <- efds |>
  filter_samples(indication == "CRC") |>
  with_sample_covariates()
m <- fetch_assay_data(sample.info, normalized = TRUE, as.matrix = TRUE)
m.rmsex <- remove_batch_effect(m, sample.info, "sex")

# this functionality is called internally from fetch_assay_data to make
# your life easy from within the facile ecosystem itself
m2 <- fetch_assay_data(sample.info, normalized = TRUE,
                       batch = "sex", as.matrix = TRUE)
all.equal(m.rmsex, m2)
}
\seealso{
\code{\link[=fetch_assay_data]{fetch_assay_data()}} when \code{batch = "something"}
}
