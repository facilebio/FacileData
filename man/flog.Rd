% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/logging.R
\name{flog}
\alias{flog}
\title{Generates a logging message using glue and crayon, with some bells/whistles.}
\usage{
flog(
  ...,
  level = "info",
  ns = NULL,
  session = NULL,
  file = stderr(),
  sep = "",
  fill = FALSE,
  labels = NULL,
  append = FALSE,
  newline = !is.null(file)
)
}
\arguments{
\item{...}{the string elements to pass into \code{\link[glue:glue]{glue::glue()}}}

\item{level}{the "firing level" of this message. Defaults to "info"}

\item{ns}{(namespace) if included, then the message checks the
namespace-specific logging priority}

\item{session, file, sep, fill, labels, append}{sent to \code{\link[base:cat]{base::cat()}}}

\item{newline}{If \code{TRUE}, appends a \verb{\\\\n} to the message. By default, this
is \code{TRUE} when \code{file} is not \code{NULL}.}
}
\value{
invisibly returns the text generated in the logging message.
}
\description{
Like other logging approaches, each message created with this function is
assigned a \code{level} (priority). If the current logging level, which is
returned from a call to \code{flog_level} (ostensibly determenied by the value
of the \code{"facile.log.level(.*?)"} option) is less than or equal to level of
this message, then the message will be generated and sent to \code{file}.
You can include a \code{namespace} for the message to provide a namespace-specific
level/priority hierarchy.
}
\details{
Conveninece wrapper functions are provided for each logging level, ie.
call \code{fwarn("message")} instead of flog("message", level = "warn")\verb{. Also, each facile* package provides its own }flog()\verb{function which sets the namespace}ns` parameter to default to a package-specific namespace so you
can control logging at the different package level.
}
\section{Logging Levels}{


Logging levels are

\if{html}{\out{<div class="sourceCode">}}\preformatted{.flog_levels <- c("all"  = 0, "trace" = 1, "debug" = 2, "info" = 3,
                  "warn" = 4, "error" = 5, "fatal" = 6)
}\if{html}{\out{</div>}}
}

\section{crayon}{

Glue lets you put cayon functions in \code{{}} to stylize output. For instance,
you can make "bold and red" the color red and also bold, like so:

\if{html}{\out{<div class="sourceCode">}}\preformatted{flog("This is \{red\}\{bold\}bold and red\{reset\}, right?")
}\if{html}{\out{</div>}}

Nice! It might be more convenient if we could make it a bit more terse,
as shown below, but that might happen at another time.

\if{html}{\out{<div class="sourceCode">}}\preformatted{flog("This is rb`bold and red`, right?")
}\if{html}{\out{</div>}}

Colors:
\itemize{
\item b: blue
\item c: cyan
\item g: green
\item k: black
\item m: magenta
\item r: red
\item y: yellow
}

Styles:
\itemize{
\item i: italic
\item s: strong (bold)
\item S: striketthrough
\item u: underline
}
}

