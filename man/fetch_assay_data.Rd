% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api.R, R/assay-data.R
\name{fetch_assay_data}
\alias{fetch_assay_data}
\alias{with_assay_data.facile_frame}
\title{Fetch assay data from single assay of choice}
\usage{
fetch_assay_data(
  x,
  features,
  samples = NULL,
  assay_name = ndefault_assay(x),
  normalized = FALSE,
  batch = NULL,
  main = NULL,
  as.matrix = FALSE,
  ...,
  subset.threshold = 700,
  aggregate = FALSE,
  aggregate.by = "ewm",
  verbose = FALSE
)

\method{with_assay_data}{facile_frame}(
  x,
  features,
  assay_name = NULL,
  normalized = TRUE,
  aggregate = FALSE,
  aggregate.by = "ewm",
  spread = TRUE,
  with_assay_name = FALSE,
  ...,
  verbose = FALSE,
  .fds = fds(x)
)
}
\arguments{
\item{x}{A \code{FacileDataSrote} object, or \code{facile_frame}}

\item{features}{a feature descriptor (data.frame with assay and feature_id
columms)}

\item{samples}{a samples descriptor}

\item{assay_name}{the name of the assay to fetch data from. Defaults to the
value of \code{\link[=default_assay]{default_assay()}} for \code{x}. Must be a subset of \code{assay_names(x)}.}

\item{normalized}{return normalize or raw data values, defaults to \code{FALSE}.
This is only really "functional" for for \code{assay_type = "rnaseq"} types
of assays, where the normalized data is log2(CPM). These values can
be tweaked with \code{log = (TRUE|FALSE)} and \code{prior.count} parameters, which
can passed down internally to (eventually) \code{\link[edgeR:cpm]{edgeR::cpm()}}.}

\item{batch}{The column names in \code{sample_info} that specify the batch
covariates in the data that will be regressed out.}

\item{main}{The name of a covaraite in \code{sample_info} that contains a known
covariate that describes the "effect" of an experiment that should not
be regressed out. Please refer to the Details section for more informaiton.}

\item{as.matrix}{by default, the data is returned in a long-form tbl-like
result. If set to \code{TRUE}, the data is returned as a matrix.}

\item{...}{parameters to pass to normalization methods}

\item{subset.threshold}{sometimes fetching all the genes is faster than
trying to subset. We have to figure out why that is, but I've previously
tested random features of different lengths, and around 700 features was
the elbow.}

\item{aggregate.by}{do you want individual level results or geneset
scores? Use 'ewm' for eigenWeightedMean, and that's all.}

\item{.fds}{A \code{FacileDataSet} object}

\item{feature_ids}{character vector of feature_ids}

\item{with_symbols}{Do you want gene symbols returned, too?}
}
\value{
A \code{tibble} (lazy or not) with assay data.

a tbl-like result
}
\description{
The \verb{(fetch|with)_assay_data} functions are some of the main workhose
functions of the facile ecosystem. These calls enable you to retrieve
raw and noramlized assay data from a FacileData container.
}
\details{
\code{fetch_assay_data(x, ...)} will return the data in long form.
\code{with_assay_data(x, ...)} is most typically used when you already have
a dataset \code{x} (a \code{facile_frame}) that you want to decorate with more assay
data. The assay data asked for will be appended on to \code{x} in wide format.
Because \code{fetch} is (most often) used at a lower level of granularity,
\code{normalize} is by default set to \code{FALSE}, while it is set to \code{TRUE} in
\code{with_assay_data}.
}
\section{Removing Batch Effects}{

When normalized data is returned, we assume these data are log-like, and you
have the option to regress out batch effects using our
\code{\link[=remove_batch_effect]{remove_batch_effect()}} wrapper to \code{\link[limma:removeBatchEffect]{limma::removeBatchEffect()}}.
}

\examples{
samples <- exampleFacileDataSet() |>
  filter_samples(indication == "BLCA", sample_type == "tumor")
features <- c(PRF1='5551', GZMA='3001', CD274='29126')
dat <- with_assay_data(samples, features, normalized = TRUE, batch = "sex")
dat <- with_assay_data(samples, features, normalized = TRUE,
                       batch = c("sex", "stage"))
dat <- with_assay_data(samples, features, normealized = TRUE,
                       batch = c("sex", "stage"), main = "sample_type")
}
